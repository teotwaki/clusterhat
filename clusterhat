#!/bin/env bash
# ClusterHAT controller

GPIO_LED="21"
GPIO_BASE_ADDRESS="$GPIO_LED"
GPIO_ON="1"
GPIO_OFF="0"
RAMPUP_DELAY=2

fatal() {
  echo "$*" 1>&2
  exit -1
}

gpio_enable() {
  local address="$1"
  gpio write "$address" "$GPIO_ON"
}

gpio_disable() {
  local address="$1"
  gpio write "$address" "$GPIO_OFF"
}

led_enable() {
  gpio_enable "$GPIO_LED"
}

led_disable() {
  gpio_disable "$GPIO_LED"
}

pizero_enable() {
  local index="$1"

  if [[ $index < 1 || $index > 4 ]]; then
    fatal "Invalid pizero index value: '$index'"
  fi

  echo "Turning on P1"
  gpio_enable "$(("$GPIO_BASE_ADDRESS" + "$index"))"

  sleep "$RAMPUP_DELAY"
}

pizero_disable() {
  local index="$1"

  if [[ $index < 1 || $index > 4 ]]; then
    fatal "Invalid pizero index value: '$index'"
  fi

  echo "Turning off P1"
  gpio_disable "$(("$GPIO_BASE_ADDRESS" + "$index"))"
}

if [ $# -gt 0 ];then
  MODE=$1
else
  echo
  echo "Usage:"
  echo " $0 <action> [<device>] [<device>]"
  echo " action = on / off"
  echo " device = all / p1 / p2 / p3 / p4"
  echo " If device is missing the action will be performed on all devices"
  echo
  echo "Examples:"
  echo "$0 on p1 p3 # Turns on P1 and P3"
  echo "$0 off all # Turns off P1-4"
  echo
  exit
fi

if [ $# -gt 1 ]; then
  devices=("$@")
else
  devices=("all")
fi

function contains() {
  local n=$#
  local value=${!n}
  for ((i=1;i < $#;i++)) {
    if [ "${!i}" == "${value}" ]; then
      echo "y"
      return 0
    fi
  }
  echo "n"
  return 1
}

if [ "$MODE" = "on" ]; then
  # Turn "Alert" LED on whilst we're running
  led_enable

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p1") == "y" ]];then
    pizero_enable 1
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p2") == "y" ]];then
    pizero_enable 2
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p3") == "y" ]];then
    pizero_enable 3
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p4") == "y" ]];then
    pizero_enable 4
  fi

  # Turn "Alert" LED off
  led_disable

elif [ "$MODE" = "off" ];then
  # Turn "Alert" LED on whilst we're running
  led_enable

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p1") == "y" ]];then
    pizero_disable 1
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p2") == "y" ]];then
    pizero_disable 2
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p3") == "y" ]];then
    pizero_disable 3
  fi

  if [[ $(contains "${devices[@]}" "all") == "y" ]] || [[ $(contains "${devices[@]}" "p4") == "y" ]];then
    pizero_disable 4
  fi

  # Turn "Alert" LED off
  led_disable
else
  echo "ERROR: Unknown Mode"
  exit
fi
