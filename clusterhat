#!/bin/env bash
# ClusterHAT controller

gpio_base_address="21"
rampup_delay=2

controller_mode=
controller_devices=

error() {
  echo "$*" 1>&2
}

fatal() {
  error "$*"
  exit -1
}

gpio_enable() {
  local address="$1"
  gpio write "$address" 1
}

gpio_disable() {
  local address="$1"
  gpio write "$address" 0
}

led_enable() {
  gpio_enable "$gpio_base_address"
}

led_disable() {
  gpio_disable "$gpio_base_address"
}

pizero_enable() {
  local index="$1"

  if [[ $index < 1 || $index > 4 ]]; then
    fatal "Invalid pizero index value: '$index'"
  fi

  echo "Turning on P$index"
  gpio_enable "$(($gpio_base_address + $index))"
}

pizero_disable() {
  local index="$1"

  if [[ $index < 1 || $index > 4 ]]; then
    fatal "Invalid pizero index value: '$index'"
  fi

  echo "Turning off P$index"
  gpio_disable "$(($gpio_base_address + $index))"
}

usage() {
  echo
  echo "Usage: $0 <action> [<device>] [<device>] ..."
  echo "  action = on / off"
  echo "  device = all / p1 / p2 / p3 / p4"
  echo
  echo "Examples:"
  echo "  $0 on p1 p3 # Turns on P1 and P3"
  echo "  $0 off all # Turns off P1-4"
}

parse_arguments() {
  if [[ $# < 2 ]]; then
    usage
    exit 1
  fi

  if [[ ${1,,} =~ on|off ]]; then
    controller_mode=${1,,}
  else
    error "Unknown mode: '$1'"
    usage
    exit 2
  fi

  shift

  while (("$#")); do
    local arg=${1,,}
    if [[ $arg == "all" ]]; then
      controller_devices="1 2 3 4"
      break
    elif [[ $arg =~ ^p([0-9])$ ]]; then
      if [[ ${BASH_REMATCH[1]} < 1 || ${BASH_REMATCH[1]} > 4 ]]; then
        error "Invalid pizero identifier: '$1'"
        usage
        exit 3
      fi
      controller_devices="$controller_devices ${BASH_REMATCH[1]}"
    else
      error "Invalid pizero identifier: '$1'"
      usage
      exit 4
    fi
    shift
  done

  controller_devices=$(tr " " "\n" <<< "$controller_devices" | sort -u)
}

run() {
  # Turn "Alert" LED on whilst we're running
  led_enable

  for device in $controller_devices; do
    if [[ $controller_mode == "on" ]]; then
      pizero_enable "$device"
    else
      pizero_disable "$device"
    fi

    if [[ $(wc -w <<< "$controller_devices") > 1 ]]; then
      sleep "$rampup_delay"
    fi
  done

  # Turn "Alert" LED off
  led_disable
}

parse_arguments $*
run
